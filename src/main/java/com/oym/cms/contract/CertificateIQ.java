package com.oym.cms.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

/**
 * @author Mr.OO
 */
@SuppressWarnings("unchecked")
public class CertificateIQ extends Contract {
    public static final String[] BINARY_ARRAY = {"","816020015b6060815260200190600190039081610fe45790505b5081526020018560405190808252806020026020018201604052801561103357816020015b606081526020019060019003908161101e5790505b5081526020018560405190808252806020026020018201604052801561106d57816020015b60608152602001906001900390816110585790505b508152602001856040519080825280602002602001820160405280156110a757816020015b60608152602001906001900390816110925790505b50815250925083836000018181525050600091505b83821015611569578473ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111199190611d9e565b602060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061116b919081019061177e565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111c0906120c6565b600060405180830381600087803b1580156111da57600080fd5b505af11580156111ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611217919081019061183a565b8360a001518381518110151561122957fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161128990612071565b600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112e0919081019061183a565b8360c00151838151811015156112f257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161135290611f08565b600060405180830381600087803b15801561136c57600080fd5b505af1158015611380573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506113a9919081019061183a565b8360e00151838151811015156113bb57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161141b90611f92565b600060405180830381600087803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611472919081019061183a565b8361010001518381518110151561148557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114e59061201c565b600060405180830381600087803b1580156114ff57600080fd5b505af1158015611513573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061153c919081019061183a565b8361012001518381518110151561154f57fe5b9060200190602002018190525081806001019250506110bc565b82600001518360a001518460c001518560e001518661010001518761012001518494508393508292508191508090509c509c509c509c509c509c505050505050505091939550919395565b61014060405190810160405280600081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60006116148251612267565b905092915050565b60006116288251612279565b905092915050565b600061163c825161228b565b905092915050565b6000611650825161229d565b905092915050565b600061166482516122af565b905092915050565b600082601f830112151561167f57600080fd5b813561169261168d826121cc565b61219f565b915080825260208301602083018583830111156116ae57600080fd5b6116b98382846122e7565b50505092915050565b600082601f83011215156116d557600080fd5b81516116e86116e3826121cc565b61219f565b9150808252602083016020830185838301111561170457600080fd5b61170f8382846122f6565b50505092915050565b600061172482356122b9565b905092915050565b60006020828403121561173e57600080fd5b600061174c84828501611608565b91505092915050565b60006020828403121561176757600080fd5b60006117758482850161161c565b91505092915050565b60006020828403121561179057600080fd5b600061179e84828501611630565b91505092915050565b6000602082840312156117b957600080fd5b60006117c784828501611644565b91505092915050565b6000602082840312156117e257600080fd5b60006117f084828501611658565b91505092915050565b60006020828403121561180b57600080fd5b600082013567ffffffffffffffff81111561182557600080fd5b6118318482850161166c565b91505092915050565b60006020828403121561184c57600080fd5b600082015167ffffffffffffffff81111561186657600080fd5b611872848285016116c2565b91505092915050565b600080600080600080600080610100898b03121561189857600080fd5b600089013567ffffffffffffffff8111156118b257600080fd5b6118be8b828c0161166c565b985050602089013567ffffffffffffffff8111156118db57600080fd5b6118e78b828c0161166c565b975050604089013567ffffffffffffffff81111561190457600080fd5b6119108b828c0161166c565b965050606089013567ffffffffffffffff81111561192d57600080fd5b6119398b828c0161166c565b955050608089013567ffffffffffffffff81111561195657600080fd5b6119628b828c0161166c565b94505060a089013567ffffffffffffffff81111561197f57600080fd5b61198b8b828c0161166c565b93505060c089013567ffffffffffffffff8111156119a857600080fd5b6119b48b828c0161166c565b92505060e089013567ffffffffffffffff8111156119d157600080fd5b6119dd8b828c0161166c565b9150509295985092959890939650565b6000602082840312156119ff57600080fd5b6000611a0d84828501611718565b91505092915050565b6000611a2182612205565b80845260208401935083602082028501611a3a856121f8565b60005b84811015611a73578383038852611a55838351611ae7565b9250611a6082612226565b9150602088019750600181019050611a3d565b508196508694505050505092915050565b611a8d816122c3565b82525050565b611a9c816122d5565b82525050565b611aab81612253565b82525050565b6000611abc8261221b565b808452611ad08160208601602086016122f6565b611ad981612329565b602085010191505092915050565b6000611af282612210565b808452611b068160208601602086016122f6565b611b0f81612329565b602085010191505092915050565b6000600282527f49440000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f7374754e756d62657200000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f636d7357696e54696d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7363686f6f6c466c6167000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f636d7344657363000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f757365724e616d650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f636d7355726c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f636d7354797065000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000604782527f7363686f6f6c466c61672c7374754e756d6265722c757365724e616d652c636d60208301527f734e616d652c636d73547970652c636d7357696e54696d652c636d734465736360408301527f2c636d7355726c000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000600782527f636d734e616d65000000000000000000000000000000000000000000000000006020830152604082019050919050565b611d988161225d565b82525050565b6000602082019050611db36000830184611aa2565b92915050565b60006020820190508181036000830152611dd38184611ae7565b905092915050565b60006020820190508181036000830152611df58184611ab1565b905092915050565b60006040820190508181036000830152611e178185611ab1565b9050611e266020830184611a84565b9392505050565b60006040820190508181036000830152611e478185611ab1565b9050611e566020830184611a93565b9392505050565b60006060820190508181036000830152611e778184611ae7565b90508181036020830152611e8a81611b1d565b90508181036040830152611e9d81611cd5565b905092915050565b60006040820190508181036000830152611ebe81611b1d565b9050611ecd6020830184611aa2565b92915050565b60006040820190508181036000830152611eec81611b54565b90508181036020830152611f008184611ab1565b905092915050565b60006020820190508181036000830152611f2181611b8b565b9050919050565b60006040820190508181036000830152611f4181611b8b565b90508181036020830152611f558184611ab1565b905092915050565b60006040820190508181036000830152611f7681611bc2565b90508181036020830152611f8a8184611ab1565b905092915050565b60006020820190508181036000830152611fab81611bf9565b9050919050565b60006040820190508181036000830152611fcb81611bf9565b90508181036020830152611fdf8184611ab1565b","905092915050565b6000604082019050818103600083015261200081611c30565b905081810360208301526120148184611ab1565b905092915050565b6000602082019050818103600083015261203581611c67565b9050919050565b6000604082019050818103600083015261205581611c67565b905081810360208301526120698184611ab1565b905092915050565b6000602082019050818103600083015261208a81611c9e565b9050919050565b600060408201905081810360008301526120aa81611c9e565b905081810360208301526120be8184611ab1565b905092915050565b600060208201905081810360008301526120df81611d58565b9050919050565b600060408201905081810360008301526120ff81611d58565b905081810360208301526121138184611ab1565b905092915050565b600060c0820190506121306000830189611d8f565b81810360208301526121428188611a16565b905081810360408301526121568187611a16565b9050818103606083015261216a8186611a16565b9050818103608083015261217e8185611a16565b905081810360a08301526121928184611a16565b9050979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156121c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156121e357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600061227282612233565b9050919050565b600061228482612233565b9050919050565b600061229682612233565b9050919050565b60006122a882612233565b9050919050565b6000819050919050565b6000819050919050565b60006122ce82612233565b9050919050565b60006122e082612233565b9050919050565b82818337600083830152505050565b60005b838110156123145780820151818401526020810190506122f9565b83811115612323576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820629bc82fc8e2a2bea843a1c6a42a7f8b9c34bad0c8a3807f42a3fdb00a5199a76c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50612374806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632dc5e2541461006757806345710fa5146100a45780635b325d78146100cf5780637287846d14610111575b600080fd5b34801561007357600080fd5b5061008e6004803603610089919081019061187b565b61014e565b60405161009b9190611d9e565b60405180910390f35b3480156100b057600080fd5b506100b96108a5565b6040516100c69190611d9e565b60405180910390f35b3480156100db57600080fd5b506100f660048036036100f191908101906117f9565b6109cc565b6040516101089695949392919061211b565b60405180910390f35b34801561011d57600080fd5b50610138600480360361013391908101906119ed565b61145d565b6040516101459190611ddb565b60405180910390f35b600080600080600061100173ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600581526020017f745f636d730000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101e29190611db9565b602060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061023491908101906117a7565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102d2919081019061177e565b92508273ffffffffffffffffffffffffffffffffffffffff1663def4269860016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161032a9190611f64565b600060405180830381600087803b15801561034457600080fd5b505af1158015610358573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103b19190611f2f565b600060405180830381600087803b1580156103cb57600080fd5b505af11580156103df573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104389190611efa565b600060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104bf919061203c565b600060405180830381600087803b1580156104d957600080fd5b505af11580156104ed573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105469190611ec5565b600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105cd91906120e6565b600060405180830381600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106549190612091565b600060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106db9190611fb2565b600060405180830381600087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107629190612007565b600060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16634c6f30c06107ba600161145d565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107f4929190611e2d565b602060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061084691908101906117d0565b91506000905060018214151561085b57600290505b7f56a118a254910f07bb34e2283e459600ff6303ce9e684315c1a28ebf08567a9f8160405161088a9190611d9e565b60405180910390a18094505050505098975050505050505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600581526020017f745f636d730000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109399190611e5d565b602060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061098b91908101906117d0565b90507f698cf490d4172e8c174ef6380602ab47c18d429938f9f778cc2c0f3b5498f2c6816040516109bc9190611d9e565b60405180910390a1809250505090565b600060608060608060606000806000806109e46115b4565b60008061100173ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600581526020017f745f636d730000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a739190611db9565b602060405180830381600087803b158015610a8d57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ac591908101906117a7565b96508673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b63919081019061172c565b95508573ffffffffffffffffffffffffffffffffffffffff1663ae763db58f6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bba9190611efa565b600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff1663d8ac5957610c12600161145d565b886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c4c929190611dfd565b602060405180830381600087803b158015610c6657600080fd5b505af1158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c9e9190810190611755565b94508473ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d3c91908101906117d0565b93506101406040519081016040528085815260200185604051908082528060200260200182016040528015610d805781602001602082028038833980820191505090505b50815260200185604051908082528060200260200182016040528015610dba57816020015b6060815260200190600190039081610da55790505b50815260200185604051908082528060200260200182016040528015610df457816020015b6060815260200190600190039081610ddf5790505b50815260200185604051908082528060200260200182016040528015610e2e57816020015b6060815260200190600190039081610e195790505b50815260200185604051908082528060200260200182016040528015610e6857816020015b6060815260200190600190039081610e535790505b50815260200185604051908082528060200260200182016040528015610ea257816020015b6060815260200190600190039081610e8d5790505b50815260200185604051908082528060200260200182016040528015610edc57816020015b6060815260200190600190039081610ec75790505b50815260200185604051908082528060200260200182016040528015610f1657816020015b6060815260200190600190039081610f015790505b50815260200185604051908082528060200260200182016040528015610f5057816020015b6060815260200190600190039081610f3b5790505b50815250925083836000018181525050600091505b83821015611412578473ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fc29190611d9e565b602060405180830381600087803b158015610fdc57600080fd5b505af1","","905092915050565b6000602082019050818103600083015261200081611c30565b9050919050565b6000604082019050818103600083015261202081611c30565b905081810360208301526120348184611ab1565b905092915050565b6000604082019050818103600083015261205581611c67565b905081810360208301526120698184611ab1565b905092915050565b6000602082019050818103600083015261208a81611d21565b9050919050565b600060408201905081810360008301526120aa81611d21565b905081810360208301526120be8184611ab1565b905092915050565b600060208201905081810360008301526120df81611d58565b9050919050565b600060408201905081810360008301526120ff81611d58565b905081810360208301526121138184611ab1565b905092915050565b600060c0820190506121306000830189611d8f565b81810360208301526121428188611a16565b905081810360408301526121568187611a16565b9050818103606083015261216a8186611a16565b9050818103608083015261217e8185611a16565b905081810360a08301526121928184611a16565b9050979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156121c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156121e357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600061227282612233565b9050919050565b600061228482612233565b9050919050565b600061229682612233565b9050919050565b60006122a882612233565b9050919050565b6000819050919050565b6000819050919050565b60006122ce82612233565b9050919050565b60006122e082612233565b9050919050565b82818337600083830152505050565b60005b838110156123145780820151818401526020810190506122f9565b83811115612323576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582010c0c0e45d3bd22b8c9eb6b33e5c568824bf2f295726402a10babdb08f500d1f6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"schoolFlag\",\"type\":\"string\"},{\"name\":\"stuNumber\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"cmsName\",\"type\":\"string\"},{\"name\":\"cmsType\",\"type\":\"string\"},{\"name\":\"cmsWinTime\",\"type\":\"string\"},{\"name\":\"cmsDesc\",\"type\":\"string\"},{\"name\":\"cmsUrl\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"uint2str\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stuNumber\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"}],\"name\":\"registerResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"}],\"name\":\"createResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_UINT2STR = "uint2str";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTERRESULT_EVENT = new Event("registerResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event CREATERESULT_EVENT = new Event("createResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected CertificateIQ(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt register(String schoolFlag, String stuNumber, String userName, String cmsName, 
                                       String cmsType, String cmsWinTime, String cmsDesc, String cmsUrl) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(schoolFlag), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(stuNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsWinTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsDesc), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String schoolFlag, String stuNumber, String userName, String cmsName, String cmsType, String cmsWinTime, String cmsDesc, String cmsUrl, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(schoolFlag), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(stuNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsWinTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsDesc), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String schoolFlag, String stuNumber, String userName, String cmsName, String cmsType, String cmsWinTime, String cmsDesc, String cmsUrl) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(schoolFlag), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(stuNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsWinTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsDesc), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cmsUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, String, String, String, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(
                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt create() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] create(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreate() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String uint2str(BigInteger i) throws ContractException {
        final Function function = new Function(FUNC_UINT2STR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple6<BigInteger, List<String>, List<String>, List<String>, List<String>, List<String>> select(String stuNumber) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(stuNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, List<String>, List<String>, List<String>, List<String>, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()));
    }

    public List<RegisterResultEventResponse> getRegisterResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERRESULT_EVENT, transactionReceipt);
        ArrayList<RegisterResultEventResponse> responses = new ArrayList<RegisterResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterResultEventResponse typedResponse = new RegisterResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static CertificateIQ load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CertificateIQ(contractAddress, client, credential);
    }

    public static CertificateIQ deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CertificateIQ.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;
    }
}
